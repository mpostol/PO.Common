#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CAS.UA.SQLRepository.SQLEntities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UAModel")]
	public partial class SQLModelDesignDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDataTypeDesign(DataTypeDesign instance);
    partial void UpdateDataTypeDesign(DataTypeDesign instance);
    partial void DeleteDataTypeDesign(DataTypeDesign instance);
    partial void InsertDefaultValue(DefaultValue instance);
    partial void UpdateDefaultValue(DefaultValue instance);
    partial void DeleteDefaultValue(DefaultValue instance);
    partial void InsertInformationsModel(InformationsModel instance);
    partial void UpdateInformationsModel(InformationsModel instance);
    partial void DeleteInformationsModel(InformationsModel instance);
    partial void InsertInputArgument(InputArgument instance);
    partial void UpdateInputArgument(InputArgument instance);
    partial void DeleteInputArgument(InputArgument instance);
    partial void InsertInstanceDesign(InstanceDesign instance);
    partial void UpdateInstanceDesign(InstanceDesign instance);
    partial void DeleteInstanceDesign(InstanceDesign instance);
    partial void InsertListOfChildren(ListOfChildren instance);
    partial void UpdateListOfChildren(ListOfChildren instance);
    partial void DeleteListOfChildren(ListOfChildren instance);
    partial void InsertListOfField(ListOfField instance);
    partial void UpdateListOfField(ListOfField instance);
    partial void DeleteListOfField(ListOfField instance);
    partial void InsertMethodDesign(MethodDesign instance);
    partial void UpdateMethodDesign(MethodDesign instance);
    partial void DeleteMethodDesign(MethodDesign instance);
    partial void InsertModelDesign(ModelDesign instance);
    partial void UpdateModelDesign(ModelDesign instance);
    partial void DeleteModelDesign(ModelDesign instance);
    partial void InsertNodeDesign(NodeDesign instance);
    partial void UpdateNodeDesign(NodeDesign instance);
    partial void DeleteNodeDesign(NodeDesign instance);
    partial void InsertObjectDesign(ObjectDesign instance);
    partial void UpdateObjectDesign(ObjectDesign instance);
    partial void DeleteObjectDesign(ObjectDesign instance);
    partial void InsertObjectTypeDesign(ObjectTypeDesign instance);
    partial void UpdateObjectTypeDesign(ObjectTypeDesign instance);
    partial void DeleteObjectTypeDesign(ObjectTypeDesign instance);
    partial void InsertOutputArgument(OutputArgument instance);
    partial void UpdateOutputArgument(OutputArgument instance);
    partial void DeleteOutputArgument(OutputArgument instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    partial void InsertReference(Reference instance);
    partial void UpdateReference(Reference instance);
    partial void DeleteReference(Reference instance);
    partial void InsertReferenceTypeDesign(ReferenceTypeDesign instance);
    partial void UpdateReferenceTypeDesign(ReferenceTypeDesign instance);
    partial void DeleteReferenceTypeDesign(ReferenceTypeDesign instance);
    partial void InsertTopLevelObject(TopLevelObject instance);
    partial void UpdateTopLevelObject(TopLevelObject instance);
    partial void DeleteTopLevelObject(TopLevelObject instance);
    partial void InsertTypeDesign(TypeDesign instance);
    partial void UpdateTypeDesign(TypeDesign instance);
    partial void DeleteTypeDesign(TypeDesign instance);
    partial void InsertVariableDesign(VariableDesign instance);
    partial void UpdateVariableDesign(VariableDesign instance);
    partial void DeleteVariableDesign(VariableDesign instance);
    partial void InsertVariableTypeDesign(VariableTypeDesign instance);
    partial void UpdateVariableTypeDesign(VariableTypeDesign instance);
    partial void DeleteVariableTypeDesign(VariableTypeDesign instance);
    #endregion
		
		public SQLModelDesignDataContext() : 
				base(global::CAS.UA.SQLRepository.Properties.Settings.Default.UAModelConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLModelDesignDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLModelDesignDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLModelDesignDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLModelDesignDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DataTypeDesign> DataTypeDesigns
		{
			get
			{
				return this.GetTable<DataTypeDesign>();
			}
		}
		
		public System.Data.Linq.Table<VariableValue> VariableValues
		{
			get
			{
				return this.GetTable<VariableValue>();
			}
		}
		
		public System.Data.Linq.Table<DefaultValue> DefaultValues
		{
			get
			{
				return this.GetTable<DefaultValue>();
			}
		}
		
		public System.Data.Linq.Table<InformationsModel> InformationsModels
		{
			get
			{
				return this.GetTable<InformationsModel>();
			}
		}
		
		public System.Data.Linq.Table<InputArgument> InputArguments
		{
			get
			{
				return this.GetTable<InputArgument>();
			}
		}
		
		public System.Data.Linq.Table<InstanceDesign> InstanceDesigns
		{
			get
			{
				return this.GetTable<InstanceDesign>();
			}
		}
		
		public System.Data.Linq.Table<ListOfChildren> ListOfChildrens
		{
			get
			{
				return this.GetTable<ListOfChildren>();
			}
		}
		
		public System.Data.Linq.Table<ListOfEncoding> ListOfEncodings
		{
			get
			{
				return this.GetTable<ListOfEncoding>();
			}
		}
		
		public System.Data.Linq.Table<ListOfField> ListOfFields
		{
			get
			{
				return this.GetTable<ListOfField>();
			}
		}
		
		public System.Data.Linq.Table<MethodDesign> MethodDesigns
		{
			get
			{
				return this.GetTable<MethodDesign>();
			}
		}
		
		public System.Data.Linq.Table<ModelDesign> ModelDesigns
		{
			get
			{
				return this.GetTable<ModelDesign>();
			}
		}
		
		public System.Data.Linq.Table<Namespace> Namespaces
		{
			get
			{
				return this.GetTable<Namespace>();
			}
		}
		
		public System.Data.Linq.Table<NodeDesign> NodeDesigns
		{
			get
			{
				return this.GetTable<NodeDesign>();
			}
		}
		
		public System.Data.Linq.Table<ObjectDesign> ObjectDesigns
		{
			get
			{
				return this.GetTable<ObjectDesign>();
			}
		}
		
		public System.Data.Linq.Table<ObjectTypeDesign> ObjectTypeDesigns
		{
			get
			{
				return this.GetTable<ObjectTypeDesign>();
			}
		}
		
		public System.Data.Linq.Table<OutputArgument> OutputArguments
		{
			get
			{
				return this.GetTable<OutputArgument>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameters
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		public System.Data.Linq.Table<PropertyValue> PropertyValues
		{
			get
			{
				return this.GetTable<PropertyValue>();
			}
		}
		
		public System.Data.Linq.Table<Reference> References
		{
			get
			{
				return this.GetTable<Reference>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceTypeDesign> ReferenceTypeDesigns
		{
			get
			{
				return this.GetTable<ReferenceTypeDesign>();
			}
		}
		
		public System.Data.Linq.Table<TopLevelObject> TopLevelObjects
		{
			get
			{
				return this.GetTable<TopLevelObject>();
			}
		}
		
		public System.Data.Linq.Table<TypeDesign> TypeDesigns
		{
			get
			{
				return this.GetTable<TypeDesign>();
			}
		}
		
		public System.Data.Linq.Table<VariableDesign> VariableDesigns
		{
			get
			{
				return this.GetTable<VariableDesign>();
			}
		}
		
		public System.Data.Linq.Table<VariableTypeDesign> VariableTypeDesigns
		{
			get
			{
				return this.GetTable<VariableTypeDesign>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataTypeDesign")]
	public partial class DataTypeDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DataTypeDesignIndex;
		
		private System.Nullable<bool> _NoArraysAllowed;
		
		private System.Nullable<bool> _NotInAddressSpace;
		
		private EntitySet<ListOfField> _ListOfFields;
		
		private EntitySet<Parameter> _Parameters;
		
		private EntitySet<VariableDesign> _VariableDesigns;
		
		private EntitySet<VariableTypeDesign> _VariableTypeDesigns;
		
		private EntityRef<TypeDesign> _TypeDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataTypeDesignIndexChanging(System.Guid value);
    partial void OnDataTypeDesignIndexChanged();
    partial void OnNoArraysAllowedChanging(System.Nullable<bool> value);
    partial void OnNoArraysAllowedChanged();
    partial void OnNotInAddressSpaceChanging(System.Nullable<bool> value);
    partial void OnNotInAddressSpaceChanged();
    #endregion
		
		public DataTypeDesign()
		{
			this._ListOfFields = new EntitySet<ListOfField>(new Action<ListOfField>(this.attach_ListOfFields), new Action<ListOfField>(this.detach_ListOfFields));
			this._Parameters = new EntitySet<Parameter>(new Action<Parameter>(this.attach_Parameters), new Action<Parameter>(this.detach_Parameters));
			this._VariableDesigns = new EntitySet<VariableDesign>(new Action<VariableDesign>(this.attach_VariableDesigns), new Action<VariableDesign>(this.detach_VariableDesigns));
			this._VariableTypeDesigns = new EntitySet<VariableTypeDesign>(new Action<VariableTypeDesign>(this.attach_VariableTypeDesigns), new Action<VariableTypeDesign>(this.detach_VariableTypeDesigns));
			this._TypeDesign = default(EntityRef<TypeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTypeDesignIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DataTypeDesignIndex
		{
			get
			{
				return this._DataTypeDesignIndex;
			}
			set
			{
				if ((this._DataTypeDesignIndex != value))
				{
					if (this._TypeDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataTypeDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._DataTypeDesignIndex = value;
					this.SendPropertyChanged("DataTypeDesignIndex");
					this.OnDataTypeDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoArraysAllowed", DbType="Bit")]
		public System.Nullable<bool> NoArraysAllowed
		{
			get
			{
				return this._NoArraysAllowed;
			}
			set
			{
				if ((this._NoArraysAllowed != value))
				{
					this.OnNoArraysAllowedChanging(value);
					this.SendPropertyChanging();
					this._NoArraysAllowed = value;
					this.SendPropertyChanged("NoArraysAllowed");
					this.OnNoArraysAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotInAddressSpace", DbType="Bit")]
		public System.Nullable<bool> NotInAddressSpace
		{
			get
			{
				return this._NotInAddressSpace;
			}
			set
			{
				if ((this._NotInAddressSpace != value))
				{
					this.OnNotInAddressSpaceChanging(value);
					this.SendPropertyChanging();
					this._NotInAddressSpace = value;
					this.SendPropertyChanged("NotInAddressSpace");
					this.OnNotInAddressSpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataTypeDesign_ListOfField", Storage="_ListOfFields", ThisKey="DataTypeDesignIndex", OtherKey="DataTypeDesignIndex")]
		public EntitySet<ListOfField> ListOfFields
		{
			get
			{
				return this._ListOfFields;
			}
			set
			{
				this._ListOfFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataTypeDesign_Parameter", Storage="_Parameters", ThisKey="DataTypeDesignIndex", OtherKey="DataTypeDesignIndex")]
		public EntitySet<Parameter> Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				this._Parameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataTypeDesign_VariableDesign", Storage="_VariableDesigns", ThisKey="DataTypeDesignIndex", OtherKey="DataTypeDesignIndex")]
		public EntitySet<VariableDesign> VariableDesigns
		{
			get
			{
				return this._VariableDesigns;
			}
			set
			{
				this._VariableDesigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataTypeDesign_VariableTypeDesign", Storage="_VariableTypeDesigns", ThisKey="DataTypeDesignIndex", OtherKey="DataTypeDesignIndex")]
		public EntitySet<VariableTypeDesign> VariableTypeDesigns
		{
			get
			{
				return this._VariableTypeDesigns;
			}
			set
			{
				this._VariableTypeDesigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDesign_DataTypeDesign", Storage="_TypeDesign", ThisKey="DataTypeDesignIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public TypeDesign TypeDesign
		{
			get
			{
				return this._TypeDesign.Entity;
			}
			set
			{
				TypeDesign previousValue = this._TypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._TypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeDesign.Entity = null;
						previousValue.DataTypeDesign = null;
					}
					this._TypeDesign.Entity = value;
					if ((value != null))
					{
						value.DataTypeDesign = this;
						this._DataTypeDesignIndex = value.NodeIndex;
					}
					else
					{
						this._DataTypeDesignIndex = default(System.Guid);
					}
					this.SendPropertyChanged("TypeDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ListOfFields(ListOfField entity)
		{
			this.SendPropertyChanging();
			entity.DataTypeDesign = this;
		}
		
		private void detach_ListOfFields(ListOfField entity)
		{
			this.SendPropertyChanging();
			entity.DataTypeDesign = null;
		}
		
		private void attach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.DataTypeDesign = this;
		}
		
		private void detach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.DataTypeDesign = null;
		}
		
		private void attach_VariableDesigns(VariableDesign entity)
		{
			this.SendPropertyChanging();
			entity.DataTypeDesign = this;
		}
		
		private void detach_VariableDesigns(VariableDesign entity)
		{
			this.SendPropertyChanging();
			entity.DataTypeDesign = null;
		}
		
		private void attach_VariableTypeDesigns(VariableTypeDesign entity)
		{
			this.SendPropertyChanging();
			entity.DataTypeDesign = this;
		}
		
		private void detach_VariableTypeDesigns(VariableTypeDesign entity)
		{
			this.SendPropertyChanging();
			entity.DataTypeDesign = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VariableValue")]
	public partial class VariableValue
	{
		
		private System.Guid _NodeIndex;
		
		private object _Value;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<double> _Quality;
		
		public VariableValue()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					this._NodeIndex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Variant", UpdateCheck=UpdateCheck.Never)]
		public object Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this._TimeStamp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quality", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this._Quality = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DefaultValue")]
	public partial class DefaultValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DefaultValueIndex;
		
		private object _Value;
		
		private EntitySet<VariableDesign> _VariableDesigns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDefaultValueIndexChanging(System.Guid value);
    partial void OnDefaultValueIndexChanged();
    partial void OnValueChanging(object value);
    partial void OnValueChanged();
    #endregion
		
		public DefaultValue()
		{
			this._VariableDesigns = new EntitySet<VariableDesign>(new Action<VariableDesign>(this.attach_VariableDesigns), new Action<VariableDesign>(this.detach_VariableDesigns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValueIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DefaultValueIndex
		{
			get
			{
				return this._DefaultValueIndex;
			}
			set
			{
				if ((this._DefaultValueIndex != value))
				{
					this.OnDefaultValueIndexChanging(value);
					this.SendPropertyChanging();
					this._DefaultValueIndex = value;
					this.SendPropertyChanged("DefaultValueIndex");
					this.OnDefaultValueIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Variant", UpdateCheck=UpdateCheck.Never)]
		public object Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DefaultValue_VariableDesign", Storage="_VariableDesigns", ThisKey="DefaultValueIndex", OtherKey="DefaultValueIndex")]
		public EntitySet<VariableDesign> VariableDesigns
		{
			get
			{
				return this._VariableDesigns;
			}
			set
			{
				this._VariableDesigns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VariableDesigns(VariableDesign entity)
		{
			this.SendPropertyChanging();
			entity.DefaultValue = this;
		}
		
		private void detach_VariableDesigns(VariableDesign entity)
		{
			this.SendPropertyChanging();
			entity.DefaultValue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InformationsModel")]
	public partial class InformationsModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InformationsModelIndex;
		
		private string _Name;
		
		private string _NameNS;
		
		private EntitySet<ModelDesign> _ModelDesigns;
		
		private EntitySet<TopLevelObject> _TopLevelObjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInformationsModelIndexChanging(System.Guid value);
    partial void OnInformationsModelIndexChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameNSChanging(string value);
    partial void OnNameNSChanged();
    #endregion
		
		public InformationsModel()
		{
			this._ModelDesigns = new EntitySet<ModelDesign>(new Action<ModelDesign>(this.attach_ModelDesigns), new Action<ModelDesign>(this.detach_ModelDesigns));
			this._TopLevelObjects = new EntitySet<TopLevelObject>(new Action<TopLevelObject>(this.attach_TopLevelObjects), new Action<TopLevelObject>(this.detach_TopLevelObjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformationsModelIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InformationsModelIndex
		{
			get
			{
				return this._InformationsModelIndex;
			}
			set
			{
				if ((this._InformationsModelIndex != value))
				{
					this.OnInformationsModelIndexChanging(value);
					this.SendPropertyChanging();
					this._InformationsModelIndex = value;
					this.SendPropertyChanged("InformationsModelIndex");
					this.OnInformationsModelIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameNS", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string NameNS
		{
			get
			{
				return this._NameNS;
			}
			set
			{
				if ((this._NameNS != value))
				{
					this.OnNameNSChanging(value);
					this.SendPropertyChanging();
					this._NameNS = value;
					this.SendPropertyChanged("NameNS");
					this.OnNameNSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InformationsModel_ModelDesign", Storage="_ModelDesigns", ThisKey="InformationsModelIndex", OtherKey="InformationsModelIndex")]
		public EntitySet<ModelDesign> ModelDesigns
		{
			get
			{
				return this._ModelDesigns;
			}
			set
			{
				this._ModelDesigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InformationsModel_TopLevelObject", Storage="_TopLevelObjects", ThisKey="InformationsModelIndex", OtherKey="InformationsModelIndex")]
		public EntitySet<TopLevelObject> TopLevelObjects
		{
			get
			{
				return this._TopLevelObjects;
			}
			set
			{
				this._TopLevelObjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModelDesigns(ModelDesign entity)
		{
			this.SendPropertyChanging();
			entity.InformationsModel = this;
		}
		
		private void detach_ModelDesigns(ModelDesign entity)
		{
			this.SendPropertyChanging();
			entity.InformationsModel = null;
		}
		
		private void attach_TopLevelObjects(TopLevelObject entity)
		{
			this.SendPropertyChanging();
			entity.InformationsModel = this;
		}
		
		private void detach_TopLevelObjects(TopLevelObject entity)
		{
			this.SendPropertyChanging();
			entity.InformationsModel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InputArguments")]
	public partial class InputArgument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ParameterIndex;
		
		private System.Nullable<System.Guid> _MethodDesignIndex;
		
		private EntityRef<Parameter> _Parameter;
		
		private EntityRef<MethodDesign> _MethodDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterIndexChanging(System.Guid value);
    partial void OnParameterIndexChanged();
    partial void OnMethodDesignIndexChanging(System.Nullable<System.Guid> value);
    partial void OnMethodDesignIndexChanged();
    #endregion
		
		public InputArgument()
		{
			this._Parameter = default(EntityRef<Parameter>);
			this._MethodDesign = default(EntityRef<MethodDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ParameterIndex
		{
			get
			{
				return this._ParameterIndex;
			}
			set
			{
				if ((this._ParameterIndex != value))
				{
					this.OnParameterIndexChanging(value);
					this.SendPropertyChanging();
					this._ParameterIndex = value;
					this.SendPropertyChanged("ParameterIndex");
					this.OnParameterIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodDesignIndex", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MethodDesignIndex
		{
			get
			{
				return this._MethodDesignIndex;
			}
			set
			{
				if ((this._MethodDesignIndex != value))
				{
					if (this._MethodDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._MethodDesignIndex = value;
					this.SendPropertyChanged("MethodDesignIndex");
					this.OnMethodDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InputArgument_Parameter", Storage="_Parameter", ThisKey="ParameterIndex", OtherKey="ParameterIndex", IsUnique=true, IsForeignKey=false)]
		public Parameter Parameter
		{
			get
			{
				return this._Parameter.Entity;
			}
			set
			{
				Parameter previousValue = this._Parameter.Entity;
				if (((previousValue != value) 
							|| (this._Parameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parameter.Entity = null;
						previousValue.InputArgument = null;
					}
					this._Parameter.Entity = value;
					if ((value != null))
					{
						value.InputArgument = this;
					}
					this.SendPropertyChanged("Parameter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MethodDesign_InputArgument", Storage="_MethodDesign", ThisKey="MethodDesignIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public MethodDesign MethodDesign
		{
			get
			{
				return this._MethodDesign.Entity;
			}
			set
			{
				MethodDesign previousValue = this._MethodDesign.Entity;
				if (((previousValue != value) 
							|| (this._MethodDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MethodDesign.Entity = null;
						previousValue.InputArguments.Remove(this);
					}
					this._MethodDesign.Entity = value;
					if ((value != null))
					{
						value.InputArguments.Add(this);
						this._MethodDesignIndex = value.NodeIndex;
					}
					else
					{
						this._MethodDesignIndex = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("MethodDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InstanceDesign")]
	public partial class InstanceDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeIndex;
		
		private EntityRef<NodeDesign> _NodeDesign;
		
		private EntityRef<ObjectDesign> _ObjectDesign;
		
		private EntityRef<MethodDesign> _MethodDesign;
		
		private EntityRef<VariableDesign> _VariableDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeIndexChanging(System.Guid value);
    partial void OnNodeIndexChanged();
    #endregion
		
		public InstanceDesign()
		{
			this._NodeDesign = default(EntityRef<NodeDesign>);
			this._ObjectDesign = default(EntityRef<ObjectDesign>);
			this._MethodDesign = default(EntityRef<MethodDesign>);
			this._VariableDesign = default(EntityRef<VariableDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					if ((this._MethodDesign.HasLoadedOrAssignedValue || this._VariableDesign.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeIndex = value;
					this.SendPropertyChanged("NodeIndex");
					this.OnNodeIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstanceDesign_NodeDesign", Storage="_NodeDesign", ThisKey="NodeIndex", OtherKey="NodeDesignIndex", IsUnique=true, IsForeignKey=false)]
		public NodeDesign NodeDesign
		{
			get
			{
				return this._NodeDesign.Entity;
			}
			set
			{
				NodeDesign previousValue = this._NodeDesign.Entity;
				if (((previousValue != value) 
							|| (this._NodeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeDesign.Entity = null;
						previousValue.InstanceDesign = null;
					}
					this._NodeDesign.Entity = value;
					if ((value != null))
					{
						value.InstanceDesign = this;
					}
					this.SendPropertyChanged("NodeDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstanceDesign_ObjectDesign", Storage="_ObjectDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsUnique=true, IsForeignKey=false)]
		public ObjectDesign ObjectDesign
		{
			get
			{
				return this._ObjectDesign.Entity;
			}
			set
			{
				ObjectDesign previousValue = this._ObjectDesign.Entity;
				if (((previousValue != value) 
							|| (this._ObjectDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectDesign.Entity = null;
						previousValue.InstanceDesign = null;
					}
					this._ObjectDesign.Entity = value;
					if ((value != null))
					{
						value.InstanceDesign = this;
					}
					this.SendPropertyChanged("ObjectDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MethodDesign_InstanceDesign", Storage="_MethodDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public MethodDesign MethodDesign
		{
			get
			{
				return this._MethodDesign.Entity;
			}
			set
			{
				MethodDesign previousValue = this._MethodDesign.Entity;
				if (((previousValue != value) 
							|| (this._MethodDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MethodDesign.Entity = null;
						previousValue.InstanceDesign = null;
					}
					this._MethodDesign.Entity = value;
					if ((value != null))
					{
						value.InstanceDesign = this;
						this._NodeIndex = value.NodeIndex;
					}
					else
					{
						this._NodeIndex = default(System.Guid);
					}
					this.SendPropertyChanged("MethodDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableDesign_InstanceDesign", Storage="_VariableDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public VariableDesign VariableDesign
		{
			get
			{
				return this._VariableDesign.Entity;
			}
			set
			{
				VariableDesign previousValue = this._VariableDesign.Entity;
				if (((previousValue != value) 
							|| (this._VariableDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VariableDesign.Entity = null;
						previousValue.InstanceDesign = null;
					}
					this._VariableDesign.Entity = value;
					if ((value != null))
					{
						value.InstanceDesign = this;
						this._NodeIndex = value.NodeIndex;
					}
					else
					{
						this._NodeIndex = default(System.Guid);
					}
					this.SendPropertyChanged("VariableDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ListOfChildren")]
	public partial class ListOfChildren : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeDesignIndex;
		
		private System.Guid _Parent;
		
		private EntityRef<NodeDesign> _NodeDesign1;
		
		private EntityRef<NodeDesign> _NodeDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeDesignIndexChanging(System.Guid value);
    partial void OnNodeDesignIndexChanged();
    partial void OnParentChanging(System.Guid value);
    partial void OnParentChanged();
    #endregion
		
		public ListOfChildren()
		{
			this._NodeDesign1 = default(EntityRef<NodeDesign>);
			this._NodeDesign = default(EntityRef<NodeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeDesignIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeDesignIndex
		{
			get
			{
				return this._NodeDesignIndex;
			}
			set
			{
				if ((this._NodeDesignIndex != value))
				{
					this.OnNodeDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeDesignIndex = value;
					this.SendPropertyChanged("NodeDesignIndex");
					this.OnNodeDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					if (this._NodeDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ListOfChildren_NodeDesign", Storage="_NodeDesign1", ThisKey="NodeDesignIndex", OtherKey="NodeDesignIndex", IsUnique=true, IsForeignKey=false)]
		public NodeDesign NodeDesign1
		{
			get
			{
				return this._NodeDesign1.Entity;
			}
			set
			{
				NodeDesign previousValue = this._NodeDesign1.Entity;
				if (((previousValue != value) 
							|| (this._NodeDesign1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeDesign1.Entity = null;
						previousValue.ListOfChildren = null;
					}
					this._NodeDesign1.Entity = value;
					if ((value != null))
					{
						value.ListOfChildren = this;
					}
					this.SendPropertyChanged("NodeDesign1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_ListOfChildren", Storage="_NodeDesign", ThisKey="Parent", OtherKey="NodeDesignIndex", IsForeignKey=true)]
		public NodeDesign NodeDesign
		{
			get
			{
				return this._NodeDesign.Entity;
			}
			set
			{
				NodeDesign previousValue = this._NodeDesign.Entity;
				if (((previousValue != value) 
							|| (this._NodeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeDesign.Entity = null;
						previousValue.ListOfChildrens.Remove(this);
					}
					this._NodeDesign.Entity = value;
					if ((value != null))
					{
						value.ListOfChildrens.Add(this);
						this._Parent = value.NodeDesignIndex;
					}
					else
					{
						this._Parent = default(System.Guid);
					}
					this.SendPropertyChanged("NodeDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ListOfEncodings")]
	public partial class ListOfEncoding
	{
		
		private System.Guid _DataTypeDesignIndex;
		
		private System.Guid _NodeIndex;
		
		public ListOfEncoding()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTypeDesignIndex", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DataTypeDesignIndex
		{
			get
			{
				return this._DataTypeDesignIndex;
			}
			set
			{
				if ((this._DataTypeDesignIndex != value))
				{
					this._DataTypeDesignIndex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					this._NodeIndex = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ListOfFields")]
	public partial class ListOfField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.Guid> _DataTypeDesignIndex;
		
		private System.Guid _ParameterIndex;
		
		private EntityRef<Parameter> _Parameter;
		
		private EntityRef<DataTypeDesign> _DataTypeDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataTypeDesignIndexChanging(System.Nullable<System.Guid> value);
    partial void OnDataTypeDesignIndexChanged();
    partial void OnParameterIndexChanging(System.Guid value);
    partial void OnParameterIndexChanged();
    #endregion
		
		public ListOfField()
		{
			this._Parameter = default(EntityRef<Parameter>);
			this._DataTypeDesign = default(EntityRef<DataTypeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTypeDesignIndex", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DataTypeDesignIndex
		{
			get
			{
				return this._DataTypeDesignIndex;
			}
			set
			{
				if ((this._DataTypeDesignIndex != value))
				{
					if (this._DataTypeDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataTypeDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._DataTypeDesignIndex = value;
					this.SendPropertyChanged("DataTypeDesignIndex");
					this.OnDataTypeDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ParameterIndex
		{
			get
			{
				return this._ParameterIndex;
			}
			set
			{
				if ((this._ParameterIndex != value))
				{
					this.OnParameterIndexChanging(value);
					this.SendPropertyChanging();
					this._ParameterIndex = value;
					this.SendPropertyChanged("ParameterIndex");
					this.OnParameterIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ListOfField_Parameter", Storage="_Parameter", ThisKey="ParameterIndex", OtherKey="ParameterIndex", IsUnique=true, IsForeignKey=false)]
		public Parameter Parameter
		{
			get
			{
				return this._Parameter.Entity;
			}
			set
			{
				Parameter previousValue = this._Parameter.Entity;
				if (((previousValue != value) 
							|| (this._Parameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parameter.Entity = null;
						previousValue.ListOfField = null;
					}
					this._Parameter.Entity = value;
					if ((value != null))
					{
						value.ListOfField = this;
					}
					this.SendPropertyChanged("Parameter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataTypeDesign_ListOfField", Storage="_DataTypeDesign", ThisKey="DataTypeDesignIndex", OtherKey="DataTypeDesignIndex", IsForeignKey=true)]
		public DataTypeDesign DataTypeDesign
		{
			get
			{
				return this._DataTypeDesign.Entity;
			}
			set
			{
				DataTypeDesign previousValue = this._DataTypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._DataTypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataTypeDesign.Entity = null;
						previousValue.ListOfFields.Remove(this);
					}
					this._DataTypeDesign.Entity = value;
					if ((value != null))
					{
						value.ListOfFields.Add(this);
						this._DataTypeDesignIndex = value.DataTypeDesignIndex;
					}
					else
					{
						this._DataTypeDesignIndex = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DataTypeDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MethodDesign")]
	public partial class MethodDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeIndex;
		
		private System.Nullable<bool> _NonExecutable;
		
		private EntitySet<InputArgument> _InputArguments;
		
		private EntityRef<InstanceDesign> _InstanceDesign;
		
		private EntitySet<OutputArgument> _OutputArguments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeIndexChanging(System.Guid value);
    partial void OnNodeIndexChanged();
    partial void OnNonExecutableChanging(System.Nullable<bool> value);
    partial void OnNonExecutableChanged();
    #endregion
		
		public MethodDesign()
		{
			this._InputArguments = new EntitySet<InputArgument>(new Action<InputArgument>(this.attach_InputArguments), new Action<InputArgument>(this.detach_InputArguments));
			this._InstanceDesign = default(EntityRef<InstanceDesign>);
			this._OutputArguments = new EntitySet<OutputArgument>(new Action<OutputArgument>(this.attach_OutputArguments), new Action<OutputArgument>(this.detach_OutputArguments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					this.OnNodeIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeIndex = value;
					this.SendPropertyChanged("NodeIndex");
					this.OnNodeIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NonExecutable", DbType="Bit")]
		public System.Nullable<bool> NonExecutable
		{
			get
			{
				return this._NonExecutable;
			}
			set
			{
				if ((this._NonExecutable != value))
				{
					this.OnNonExecutableChanging(value);
					this.SendPropertyChanging();
					this._NonExecutable = value;
					this.SendPropertyChanged("NonExecutable");
					this.OnNonExecutableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MethodDesign_InputArgument", Storage="_InputArguments", ThisKey="NodeIndex", OtherKey="MethodDesignIndex")]
		public EntitySet<InputArgument> InputArguments
		{
			get
			{
				return this._InputArguments;
			}
			set
			{
				this._InputArguments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MethodDesign_InstanceDesign", Storage="_InstanceDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsUnique=true, IsForeignKey=false)]
		public InstanceDesign InstanceDesign
		{
			get
			{
				return this._InstanceDesign.Entity;
			}
			set
			{
				InstanceDesign previousValue = this._InstanceDesign.Entity;
				if (((previousValue != value) 
							|| (this._InstanceDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstanceDesign.Entity = null;
						previousValue.MethodDesign = null;
					}
					this._InstanceDesign.Entity = value;
					if ((value != null))
					{
						value.MethodDesign = this;
					}
					this.SendPropertyChanged("InstanceDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MethodDesign_OutputArgument", Storage="_OutputArguments", ThisKey="NodeIndex", OtherKey="MethodDesignIndex")]
		public EntitySet<OutputArgument> OutputArguments
		{
			get
			{
				return this._OutputArguments;
			}
			set
			{
				this._OutputArguments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InputArguments(InputArgument entity)
		{
			this.SendPropertyChanging();
			entity.MethodDesign = this;
		}
		
		private void detach_InputArguments(InputArgument entity)
		{
			this.SendPropertyChanging();
			entity.MethodDesign = null;
		}
		
		private void attach_OutputArguments(OutputArgument entity)
		{
			this.SendPropertyChanging();
			entity.MethodDesign = this;
		}
		
		private void detach_OutputArguments(OutputArgument entity)
		{
			this.SendPropertyChanging();
			entity.MethodDesign = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModelDesign")]
	public partial class ModelDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ModelDesignIndex;
		
		private System.Guid _InformationsModelIndex;
		
		private string _TargetNamespace;
		
		private string _TargetXmlNamespace;
		
		private string _DefaultLocale;
		
		private EntitySet<NodeDesign> _NodeDesigns;
		
		private EntityRef<InformationsModel> _InformationsModel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModelDesignIndexChanging(System.Guid value);
    partial void OnModelDesignIndexChanged();
    partial void OnInformationsModelIndexChanging(System.Guid value);
    partial void OnInformationsModelIndexChanged();
    partial void OnTargetNamespaceChanging(string value);
    partial void OnTargetNamespaceChanged();
    partial void OnTargetXmlNamespaceChanging(string value);
    partial void OnTargetXmlNamespaceChanged();
    partial void OnDefaultLocaleChanging(string value);
    partial void OnDefaultLocaleChanged();
    #endregion
		
		public ModelDesign()
		{
			this._NodeDesigns = new EntitySet<NodeDesign>(new Action<NodeDesign>(this.attach_NodeDesigns), new Action<NodeDesign>(this.detach_NodeDesigns));
			this._InformationsModel = default(EntityRef<InformationsModel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelDesignIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ModelDesignIndex
		{
			get
			{
				return this._ModelDesignIndex;
			}
			set
			{
				if ((this._ModelDesignIndex != value))
				{
					this.OnModelDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._ModelDesignIndex = value;
					this.SendPropertyChanged("ModelDesignIndex");
					this.OnModelDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformationsModelIndex", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InformationsModelIndex
		{
			get
			{
				return this._InformationsModelIndex;
			}
			set
			{
				if ((this._InformationsModelIndex != value))
				{
					if (this._InformationsModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInformationsModelIndexChanging(value);
					this.SendPropertyChanging();
					this._InformationsModelIndex = value;
					this.SendPropertyChanged("InformationsModelIndex");
					this.OnInformationsModelIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetNamespace", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string TargetNamespace
		{
			get
			{
				return this._TargetNamespace;
			}
			set
			{
				if ((this._TargetNamespace != value))
				{
					this.OnTargetNamespaceChanging(value);
					this.SendPropertyChanging();
					this._TargetNamespace = value;
					this.SendPropertyChanged("TargetNamespace");
					this.OnTargetNamespaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetXmlNamespace", DbType="NChar(10)")]
		public string TargetXmlNamespace
		{
			get
			{
				return this._TargetXmlNamespace;
			}
			set
			{
				if ((this._TargetXmlNamespace != value))
				{
					this.OnTargetXmlNamespaceChanging(value);
					this.SendPropertyChanging();
					this._TargetXmlNamespace = value;
					this.SendPropertyChanged("TargetXmlNamespace");
					this.OnTargetXmlNamespaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultLocale", DbType="NChar(10)")]
		public string DefaultLocale
		{
			get
			{
				return this._DefaultLocale;
			}
			set
			{
				if ((this._DefaultLocale != value))
				{
					this.OnDefaultLocaleChanging(value);
					this.SendPropertyChanging();
					this._DefaultLocale = value;
					this.SendPropertyChanged("DefaultLocale");
					this.OnDefaultLocaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ModelDesign_NodeDesign", Storage="_NodeDesigns", ThisKey="ModelDesignIndex", OtherKey="ModelDesignIndex")]
		public EntitySet<NodeDesign> NodeDesigns
		{
			get
			{
				return this._NodeDesigns;
			}
			set
			{
				this._NodeDesigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InformationsModel_ModelDesign", Storage="_InformationsModel", ThisKey="InformationsModelIndex", OtherKey="InformationsModelIndex", IsForeignKey=true)]
		public InformationsModel InformationsModel
		{
			get
			{
				return this._InformationsModel.Entity;
			}
			set
			{
				InformationsModel previousValue = this._InformationsModel.Entity;
				if (((previousValue != value) 
							|| (this._InformationsModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InformationsModel.Entity = null;
						previousValue.ModelDesigns.Remove(this);
					}
					this._InformationsModel.Entity = value;
					if ((value != null))
					{
						value.ModelDesigns.Add(this);
						this._InformationsModelIndex = value.InformationsModelIndex;
					}
					else
					{
						this._InformationsModelIndex = default(System.Guid);
					}
					this.SendPropertyChanged("InformationsModel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NodeDesigns(NodeDesign entity)
		{
			this.SendPropertyChanging();
			entity.ModelDesign = this;
		}
		
		private void detach_NodeDesigns(NodeDesign entity)
		{
			this.SendPropertyChanging();
			entity.ModelDesign = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Namespace")]
	public partial class Namespace
	{
		
		private System.Nullable<System.Guid> _ModelDesignIndex;
		
		private string _Name;
		
		private string _Prefix;
		
		private string _InternalPrefix;
		
		private string _XmlNamespace;
		
		private string _XmlPrefix;
		
		private string _FilePath;
		
		public Namespace()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelDesignIndex", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ModelDesignIndex
		{
			get
			{
				return this._ModelDesignIndex;
			}
			set
			{
				if ((this._ModelDesignIndex != value))
				{
					this._ModelDesignIndex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="NChar(10)")]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this._Prefix = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalPrefix", DbType="NChar(10)")]
		public string InternalPrefix
		{
			get
			{
				return this._InternalPrefix;
			}
			set
			{
				if ((this._InternalPrefix != value))
				{
					this._InternalPrefix = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XmlNamespace", DbType="NChar(10)")]
		public string XmlNamespace
		{
			get
			{
				return this._XmlNamespace;
			}
			set
			{
				if ((this._XmlNamespace != value))
				{
					this._XmlNamespace = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XmlPrefix", DbType="NChar(10)")]
		public string XmlPrefix
		{
			get
			{
				return this._XmlPrefix;
			}
			set
			{
				if ((this._XmlPrefix != value))
				{
					this._XmlPrefix = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NChar(10)")]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this._FilePath = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NodeDesign")]
	public partial class NodeDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BrowseName;
		
		private string _DisplayName;
		
		private string _DisplayNameKey;
		
		private string _Description;
		
		private string _DescriptionKey;
		
		private System.Guid _NodeDesignIndex;
		
		private string _SymbolicName;
		
		private string _SymbolicNameNS;
		
		private string _SymbolicId;
		
		private string _SymbolicIdNS;
		
		private System.Nullable<bool> _IsDeclaration;
		
		private System.Nullable<int> _NumericId;
		
		private System.Nullable<int> _WriteAccess;
		
		private System.Guid _ModelDesignIndex;
		
		private EntitySet<ListOfChildren> _ListOfChildrens;
		
		private EntitySet<Reference> _References;
		
		private EntitySet<Reference> _References1;
		
		private EntitySet<Reference> _References2;
		
		private EntityRef<TopLevelObject> _TopLevelObject;
		
		private EntitySet<TypeDesign> _TypeDesigns;
		
		private EntityRef<InstanceDesign> _InstanceDesign;
		
		private EntityRef<ListOfChildren> _ListOfChildren;
		
		private EntityRef<ModelDesign> _ModelDesign;
		
		private EntityRef<TypeDesign> _TypeDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrowseNameChanging(string value);
    partial void OnBrowseNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnDisplayNameKeyChanging(string value);
    partial void OnDisplayNameKeyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionKeyChanging(string value);
    partial void OnDescriptionKeyChanged();
    partial void OnNodeDesignIndexChanging(System.Guid value);
    partial void OnNodeDesignIndexChanged();
    partial void OnSymbolicNameChanging(string value);
    partial void OnSymbolicNameChanged();
    partial void OnSymbolicNameNSChanging(string value);
    partial void OnSymbolicNameNSChanged();
    partial void OnSymbolicIdChanging(string value);
    partial void OnSymbolicIdChanged();
    partial void OnSymbolicIdNSChanging(string value);
    partial void OnSymbolicIdNSChanged();
    partial void OnIsDeclarationChanging(System.Nullable<bool> value);
    partial void OnIsDeclarationChanged();
    partial void OnNumericIdChanging(System.Nullable<int> value);
    partial void OnNumericIdChanged();
    partial void OnWriteAccessChanging(System.Nullable<int> value);
    partial void OnWriteAccessChanged();
    partial void OnModelDesignIndexChanging(System.Guid value);
    partial void OnModelDesignIndexChanged();
    #endregion
		
		public NodeDesign()
		{
			this._ListOfChildrens = new EntitySet<ListOfChildren>(new Action<ListOfChildren>(this.attach_ListOfChildrens), new Action<ListOfChildren>(this.detach_ListOfChildrens));
			this._References = new EntitySet<Reference>(new Action<Reference>(this.attach_References), new Action<Reference>(this.detach_References));
			this._References1 = new EntitySet<Reference>(new Action<Reference>(this.attach_References1), new Action<Reference>(this.detach_References1));
			this._References2 = new EntitySet<Reference>(new Action<Reference>(this.attach_References2), new Action<Reference>(this.detach_References2));
			this._TopLevelObject = default(EntityRef<TopLevelObject>);
			this._TypeDesigns = new EntitySet<TypeDesign>(new Action<TypeDesign>(this.attach_TypeDesigns), new Action<TypeDesign>(this.detach_TypeDesigns));
			this._InstanceDesign = default(EntityRef<InstanceDesign>);
			this._ListOfChildren = default(EntityRef<ListOfChildren>);
			this._ModelDesign = default(EntityRef<ModelDesign>);
			this._TypeDesign = default(EntityRef<TypeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrowseName", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string BrowseName
		{
			get
			{
				return this._BrowseName;
			}
			set
			{
				if ((this._BrowseName != value))
				{
					this.OnBrowseNameChanging(value);
					this.SendPropertyChanging();
					this._BrowseName = value;
					this.SendPropertyChanged("BrowseName");
					this.OnBrowseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NChar(10)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayNameKey", DbType="NChar(10)")]
		public string DisplayNameKey
		{
			get
			{
				return this._DisplayNameKey;
			}
			set
			{
				if ((this._DisplayNameKey != value))
				{
					this.OnDisplayNameKeyChanging(value);
					this.SendPropertyChanging();
					this._DisplayNameKey = value;
					this.SendPropertyChanged("DisplayNameKey");
					this.OnDisplayNameKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(10)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionKey", DbType="NChar(10)")]
		public string DescriptionKey
		{
			get
			{
				return this._DescriptionKey;
			}
			set
			{
				if ((this._DescriptionKey != value))
				{
					this.OnDescriptionKeyChanging(value);
					this.SendPropertyChanging();
					this._DescriptionKey = value;
					this.SendPropertyChanged("DescriptionKey");
					this.OnDescriptionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeDesignIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeDesignIndex
		{
			get
			{
				return this._NodeDesignIndex;
			}
			set
			{
				if ((this._NodeDesignIndex != value))
				{
					if (((this._InstanceDesign.HasLoadedOrAssignedValue || this._ListOfChildren.HasLoadedOrAssignedValue) 
								|| this._TypeDesign.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeDesignIndex = value;
					this.SendPropertyChanged("NodeDesignIndex");
					this.OnNodeDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SymbolicName", DbType="NChar(10)")]
		public string SymbolicName
		{
			get
			{
				return this._SymbolicName;
			}
			set
			{
				if ((this._SymbolicName != value))
				{
					this.OnSymbolicNameChanging(value);
					this.SendPropertyChanging();
					this._SymbolicName = value;
					this.SendPropertyChanged("SymbolicName");
					this.OnSymbolicNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SymbolicNameNS", DbType="NChar(10)")]
		public string SymbolicNameNS
		{
			get
			{
				return this._SymbolicNameNS;
			}
			set
			{
				if ((this._SymbolicNameNS != value))
				{
					this.OnSymbolicNameNSChanging(value);
					this.SendPropertyChanging();
					this._SymbolicNameNS = value;
					this.SendPropertyChanged("SymbolicNameNS");
					this.OnSymbolicNameNSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SymbolicId", DbType="NChar(10)")]
		public string SymbolicId
		{
			get
			{
				return this._SymbolicId;
			}
			set
			{
				if ((this._SymbolicId != value))
				{
					this.OnSymbolicIdChanging(value);
					this.SendPropertyChanging();
					this._SymbolicId = value;
					this.SendPropertyChanged("SymbolicId");
					this.OnSymbolicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SymbolicIdNS", DbType="NChar(10)")]
		public string SymbolicIdNS
		{
			get
			{
				return this._SymbolicIdNS;
			}
			set
			{
				if ((this._SymbolicIdNS != value))
				{
					this.OnSymbolicIdNSChanging(value);
					this.SendPropertyChanging();
					this._SymbolicIdNS = value;
					this.SendPropertyChanged("SymbolicIdNS");
					this.OnSymbolicIdNSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeclaration", DbType="Bit")]
		public System.Nullable<bool> IsDeclaration
		{
			get
			{
				return this._IsDeclaration;
			}
			set
			{
				if ((this._IsDeclaration != value))
				{
					this.OnIsDeclarationChanging(value);
					this.SendPropertyChanging();
					this._IsDeclaration = value;
					this.SendPropertyChanged("IsDeclaration");
					this.OnIsDeclarationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumericId", DbType="Int")]
		public System.Nullable<int> NumericId
		{
			get
			{
				return this._NumericId;
			}
			set
			{
				if ((this._NumericId != value))
				{
					this.OnNumericIdChanging(value);
					this.SendPropertyChanging();
					this._NumericId = value;
					this.SendPropertyChanged("NumericId");
					this.OnNumericIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriteAccess", DbType="Int")]
		public System.Nullable<int> WriteAccess
		{
			get
			{
				return this._WriteAccess;
			}
			set
			{
				if ((this._WriteAccess != value))
				{
					this.OnWriteAccessChanging(value);
					this.SendPropertyChanging();
					this._WriteAccess = value;
					this.SendPropertyChanged("WriteAccess");
					this.OnWriteAccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelDesignIndex", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ModelDesignIndex
		{
			get
			{
				return this._ModelDesignIndex;
			}
			set
			{
				if ((this._ModelDesignIndex != value))
				{
					if (this._ModelDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._ModelDesignIndex = value;
					this.SendPropertyChanged("ModelDesignIndex");
					this.OnModelDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_ListOfChildren", Storage="_ListOfChildrens", ThisKey="NodeDesignIndex", OtherKey="Parent")]
		public EntitySet<ListOfChildren> ListOfChildrens
		{
			get
			{
				return this._ListOfChildrens;
			}
			set
			{
				this._ListOfChildrens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_Reference", Storage="_References", ThisKey="NodeDesignIndex", OtherKey="Parent")]
		public EntitySet<Reference> References
		{
			get
			{
				return this._References;
			}
			set
			{
				this._References.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_Reference1", Storage="_References1", ThisKey="NodeDesignIndex", OtherKey="Target")]
		public EntitySet<Reference> References1
		{
			get
			{
				return this._References1;
			}
			set
			{
				this._References1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_Reference2", Storage="_References2", ThisKey="NodeDesignIndex", OtherKey="Type")]
		public EntitySet<Reference> References2
		{
			get
			{
				return this._References2;
			}
			set
			{
				this._References2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_TopLevelObject", Storage="_TopLevelObject", ThisKey="NodeDesignIndex", OtherKey="NodeDesignIndex", IsUnique=true, IsForeignKey=false)]
		public TopLevelObject TopLevelObject
		{
			get
			{
				return this._TopLevelObject.Entity;
			}
			set
			{
				TopLevelObject previousValue = this._TopLevelObject.Entity;
				if (((previousValue != value) 
							|| (this._TopLevelObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TopLevelObject.Entity = null;
						previousValue.NodeDesign = null;
					}
					this._TopLevelObject.Entity = value;
					if ((value != null))
					{
						value.NodeDesign = this;
					}
					this.SendPropertyChanged("TopLevelObject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_TypeDesign", Storage="_TypeDesigns", ThisKey="NodeDesignIndex", OtherKey="BaseType")]
		public EntitySet<TypeDesign> TypeDesigns
		{
			get
			{
				return this._TypeDesigns;
			}
			set
			{
				this._TypeDesigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstanceDesign_NodeDesign", Storage="_InstanceDesign", ThisKey="NodeDesignIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public InstanceDesign InstanceDesign
		{
			get
			{
				return this._InstanceDesign.Entity;
			}
			set
			{
				InstanceDesign previousValue = this._InstanceDesign.Entity;
				if (((previousValue != value) 
							|| (this._InstanceDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstanceDesign.Entity = null;
						previousValue.NodeDesign = null;
					}
					this._InstanceDesign.Entity = value;
					if ((value != null))
					{
						value.NodeDesign = this;
						this._NodeDesignIndex = value.NodeIndex;
					}
					else
					{
						this._NodeDesignIndex = default(System.Guid);
					}
					this.SendPropertyChanged("InstanceDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ListOfChildren_NodeDesign", Storage="_ListOfChildren", ThisKey="NodeDesignIndex", OtherKey="NodeDesignIndex", IsForeignKey=true)]
		public ListOfChildren ListOfChildren
		{
			get
			{
				return this._ListOfChildren.Entity;
			}
			set
			{
				ListOfChildren previousValue = this._ListOfChildren.Entity;
				if (((previousValue != value) 
							|| (this._ListOfChildren.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ListOfChildren.Entity = null;
						previousValue.NodeDesign1 = null;
					}
					this._ListOfChildren.Entity = value;
					if ((value != null))
					{
						value.NodeDesign1 = this;
						this._NodeDesignIndex = value.NodeDesignIndex;
					}
					else
					{
						this._NodeDesignIndex = default(System.Guid);
					}
					this.SendPropertyChanged("ListOfChildren");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ModelDesign_NodeDesign", Storage="_ModelDesign", ThisKey="ModelDesignIndex", OtherKey="ModelDesignIndex", IsForeignKey=true)]
		public ModelDesign ModelDesign
		{
			get
			{
				return this._ModelDesign.Entity;
			}
			set
			{
				ModelDesign previousValue = this._ModelDesign.Entity;
				if (((previousValue != value) 
							|| (this._ModelDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ModelDesign.Entity = null;
						previousValue.NodeDesigns.Remove(this);
					}
					this._ModelDesign.Entity = value;
					if ((value != null))
					{
						value.NodeDesigns.Add(this);
						this._ModelDesignIndex = value.ModelDesignIndex;
					}
					else
					{
						this._ModelDesignIndex = default(System.Guid);
					}
					this.SendPropertyChanged("ModelDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDesign_NodeDesign", Storage="_TypeDesign", ThisKey="NodeDesignIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public TypeDesign TypeDesign
		{
			get
			{
				return this._TypeDesign.Entity;
			}
			set
			{
				TypeDesign previousValue = this._TypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._TypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeDesign.Entity = null;
						previousValue.NodeDesign = null;
					}
					this._TypeDesign.Entity = value;
					if ((value != null))
					{
						value.NodeDesign = this;
						this._NodeDesignIndex = value.NodeIndex;
					}
					else
					{
						this._NodeDesignIndex = default(System.Guid);
					}
					this.SendPropertyChanged("TypeDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ListOfChildrens(ListOfChildren entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign = this;
		}
		
		private void detach_ListOfChildrens(ListOfChildren entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign = null;
		}
		
		private void attach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign = this;
		}
		
		private void detach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign = null;
		}
		
		private void attach_References1(Reference entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign1 = this;
		}
		
		private void detach_References1(Reference entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign1 = null;
		}
		
		private void attach_References2(Reference entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign2 = this;
		}
		
		private void detach_References2(Reference entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign2 = null;
		}
		
		private void attach_TypeDesigns(TypeDesign entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign1 = this;
		}
		
		private void detach_TypeDesigns(TypeDesign entity)
		{
			this.SendPropertyChanging();
			entity.NodeDesign1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObjectDesign")]
	public partial class ObjectDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeIndex;
		
		private System.Nullable<bool> _SupportsEvents;
		
		private EntityRef<InstanceDesign> _InstanceDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeIndexChanging(System.Guid value);
    partial void OnNodeIndexChanged();
    partial void OnSupportsEventsChanging(System.Nullable<bool> value);
    partial void OnSupportsEventsChanged();
    #endregion
		
		public ObjectDesign()
		{
			this._InstanceDesign = default(EntityRef<InstanceDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					if (this._InstanceDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeIndex = value;
					this.SendPropertyChanged("NodeIndex");
					this.OnNodeIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportsEvents", DbType="Bit")]
		public System.Nullable<bool> SupportsEvents
		{
			get
			{
				return this._SupportsEvents;
			}
			set
			{
				if ((this._SupportsEvents != value))
				{
					this.OnSupportsEventsChanging(value);
					this.SendPropertyChanging();
					this._SupportsEvents = value;
					this.SendPropertyChanged("SupportsEvents");
					this.OnSupportsEventsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstanceDesign_ObjectDesign", Storage="_InstanceDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public InstanceDesign InstanceDesign
		{
			get
			{
				return this._InstanceDesign.Entity;
			}
			set
			{
				InstanceDesign previousValue = this._InstanceDesign.Entity;
				if (((previousValue != value) 
							|| (this._InstanceDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstanceDesign.Entity = null;
						previousValue.ObjectDesign = null;
					}
					this._InstanceDesign.Entity = value;
					if ((value != null))
					{
						value.ObjectDesign = this;
						this._NodeIndex = value.NodeIndex;
					}
					else
					{
						this._NodeIndex = default(System.Guid);
					}
					this.SendPropertyChanged("InstanceDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObjectTypeDesign")]
	public partial class ObjectTypeDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeIndex;
		
		private System.Nullable<bool> _SupportsEvents;
		
		private EntityRef<TypeDesign> _TypeDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeIndexChanging(System.Guid value);
    partial void OnNodeIndexChanged();
    partial void OnSupportsEventsChanging(System.Nullable<bool> value);
    partial void OnSupportsEventsChanged();
    #endregion
		
		public ObjectTypeDesign()
		{
			this._TypeDesign = default(EntityRef<TypeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					if (this._TypeDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeIndex = value;
					this.SendPropertyChanged("NodeIndex");
					this.OnNodeIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportsEvents", DbType="Bit")]
		public System.Nullable<bool> SupportsEvents
		{
			get
			{
				return this._SupportsEvents;
			}
			set
			{
				if ((this._SupportsEvents != value))
				{
					this.OnSupportsEventsChanging(value);
					this.SendPropertyChanging();
					this._SupportsEvents = value;
					this.SendPropertyChanged("SupportsEvents");
					this.OnSupportsEventsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDesign_ObjectTypeDesign", Storage="_TypeDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public TypeDesign TypeDesign
		{
			get
			{
				return this._TypeDesign.Entity;
			}
			set
			{
				TypeDesign previousValue = this._TypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._TypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeDesign.Entity = null;
						previousValue.ObjectTypeDesign = null;
					}
					this._TypeDesign.Entity = value;
					if ((value != null))
					{
						value.ObjectTypeDesign = this;
						this._NodeIndex = value.NodeIndex;
					}
					else
					{
						this._NodeIndex = default(System.Guid);
					}
					this.SendPropertyChanged("TypeDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutputArguments")]
	public partial class OutputArgument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ParameterIndex;
		
		private System.Guid _MethodDesignIndex;
		
		private EntityRef<MethodDesign> _MethodDesign;
		
		private EntityRef<Parameter> _Parameter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterIndexChanging(System.Guid value);
    partial void OnParameterIndexChanged();
    partial void OnMethodDesignIndexChanging(System.Guid value);
    partial void OnMethodDesignIndexChanged();
    #endregion
		
		public OutputArgument()
		{
			this._MethodDesign = default(EntityRef<MethodDesign>);
			this._Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ParameterIndex
		{
			get
			{
				return this._ParameterIndex;
			}
			set
			{
				if ((this._ParameterIndex != value))
				{
					if (this._Parameter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParameterIndexChanging(value);
					this.SendPropertyChanging();
					this._ParameterIndex = value;
					this.SendPropertyChanged("ParameterIndex");
					this.OnParameterIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodDesignIndex", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MethodDesignIndex
		{
			get
			{
				return this._MethodDesignIndex;
			}
			set
			{
				if ((this._MethodDesignIndex != value))
				{
					if (this._MethodDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._MethodDesignIndex = value;
					this.SendPropertyChanged("MethodDesignIndex");
					this.OnMethodDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MethodDesign_OutputArgument", Storage="_MethodDesign", ThisKey="MethodDesignIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public MethodDesign MethodDesign
		{
			get
			{
				return this._MethodDesign.Entity;
			}
			set
			{
				MethodDesign previousValue = this._MethodDesign.Entity;
				if (((previousValue != value) 
							|| (this._MethodDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MethodDesign.Entity = null;
						previousValue.OutputArguments.Remove(this);
					}
					this._MethodDesign.Entity = value;
					if ((value != null))
					{
						value.OutputArguments.Add(this);
						this._MethodDesignIndex = value.NodeIndex;
					}
					else
					{
						this._MethodDesignIndex = default(System.Guid);
					}
					this.SendPropertyChanged("MethodDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_OutputArgument", Storage="_Parameter", ThisKey="ParameterIndex", OtherKey="ParameterIndex", IsForeignKey=true)]
		public Parameter Parameter
		{
			get
			{
				return this._Parameter.Entity;
			}
			set
			{
				Parameter previousValue = this._Parameter.Entity;
				if (((previousValue != value) 
							|| (this._Parameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parameter.Entity = null;
						previousValue.OutputArgument = null;
					}
					this._Parameter.Entity = value;
					if ((value != null))
					{
						value.OutputArgument = this;
						this._ParameterIndex = value.ParameterIndex;
					}
					else
					{
						this._ParameterIndex = default(System.Guid);
					}
					this.SendPropertyChanged("Parameter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameter")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ParameterIndex;
		
		private string _Description;
		
		private string _DescriptionKey;
		
		private string _Name;
		
		private System.Nullable<int> _Identifier;
		
		private System.Guid _DataTypeDesignIndex;
		
		private System.Nullable<int> _ValueRank;
		
		private EntityRef<OutputArgument> _OutputArgument;
		
		private EntityRef<DataTypeDesign> _DataTypeDesign;
		
		private EntityRef<InputArgument> _InputArgument;
		
		private EntityRef<ListOfField> _ListOfField;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterIndexChanging(System.Guid value);
    partial void OnParameterIndexChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionKeyChanging(string value);
    partial void OnDescriptionKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdentifierChanging(System.Nullable<int> value);
    partial void OnIdentifierChanged();
    partial void OnDataTypeDesignIndexChanging(System.Guid value);
    partial void OnDataTypeDesignIndexChanged();
    partial void OnValueRankChanging(System.Nullable<int> value);
    partial void OnValueRankChanged();
    #endregion
		
		public Parameter()
		{
			this._OutputArgument = default(EntityRef<OutputArgument>);
			this._DataTypeDesign = default(EntityRef<DataTypeDesign>);
			this._InputArgument = default(EntityRef<InputArgument>);
			this._ListOfField = default(EntityRef<ListOfField>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ParameterIndex
		{
			get
			{
				return this._ParameterIndex;
			}
			set
			{
				if ((this._ParameterIndex != value))
				{
					if ((this._InputArgument.HasLoadedOrAssignedValue || this._ListOfField.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParameterIndexChanging(value);
					this.SendPropertyChanging();
					this._ParameterIndex = value;
					this.SendPropertyChanged("ParameterIndex");
					this.OnParameterIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(10)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionKey", DbType="NChar(10)")]
		public string DescriptionKey
		{
			get
			{
				return this._DescriptionKey;
			}
			set
			{
				if ((this._DescriptionKey != value))
				{
					this.OnDescriptionKeyChanging(value);
					this.SendPropertyChanging();
					this._DescriptionKey = value;
					this.SendPropertyChanged("DescriptionKey");
					this.OnDescriptionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="Int")]
		public System.Nullable<int> Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTypeDesignIndex", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DataTypeDesignIndex
		{
			get
			{
				return this._DataTypeDesignIndex;
			}
			set
			{
				if ((this._DataTypeDesignIndex != value))
				{
					if (this._DataTypeDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataTypeDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._DataTypeDesignIndex = value;
					this.SendPropertyChanged("DataTypeDesignIndex");
					this.OnDataTypeDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueRank", DbType="Int")]
		public System.Nullable<int> ValueRank
		{
			get
			{
				return this._ValueRank;
			}
			set
			{
				if ((this._ValueRank != value))
				{
					this.OnValueRankChanging(value);
					this.SendPropertyChanging();
					this._ValueRank = value;
					this.SendPropertyChanged("ValueRank");
					this.OnValueRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_OutputArgument", Storage="_OutputArgument", ThisKey="ParameterIndex", OtherKey="ParameterIndex", IsUnique=true, IsForeignKey=false)]
		public OutputArgument OutputArgument
		{
			get
			{
				return this._OutputArgument.Entity;
			}
			set
			{
				OutputArgument previousValue = this._OutputArgument.Entity;
				if (((previousValue != value) 
							|| (this._OutputArgument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OutputArgument.Entity = null;
						previousValue.Parameter = null;
					}
					this._OutputArgument.Entity = value;
					if ((value != null))
					{
						value.Parameter = this;
					}
					this.SendPropertyChanged("OutputArgument");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataTypeDesign_Parameter", Storage="_DataTypeDesign", ThisKey="DataTypeDesignIndex", OtherKey="DataTypeDesignIndex", IsForeignKey=true)]
		public DataTypeDesign DataTypeDesign
		{
			get
			{
				return this._DataTypeDesign.Entity;
			}
			set
			{
				DataTypeDesign previousValue = this._DataTypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._DataTypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataTypeDesign.Entity = null;
						previousValue.Parameters.Remove(this);
					}
					this._DataTypeDesign.Entity = value;
					if ((value != null))
					{
						value.Parameters.Add(this);
						this._DataTypeDesignIndex = value.DataTypeDesignIndex;
					}
					else
					{
						this._DataTypeDesignIndex = default(System.Guid);
					}
					this.SendPropertyChanged("DataTypeDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InputArgument_Parameter", Storage="_InputArgument", ThisKey="ParameterIndex", OtherKey="ParameterIndex", IsForeignKey=true)]
		public InputArgument InputArgument
		{
			get
			{
				return this._InputArgument.Entity;
			}
			set
			{
				InputArgument previousValue = this._InputArgument.Entity;
				if (((previousValue != value) 
							|| (this._InputArgument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InputArgument.Entity = null;
						previousValue.Parameter = null;
					}
					this._InputArgument.Entity = value;
					if ((value != null))
					{
						value.Parameter = this;
						this._ParameterIndex = value.ParameterIndex;
					}
					else
					{
						this._ParameterIndex = default(System.Guid);
					}
					this.SendPropertyChanged("InputArgument");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ListOfField_Parameter", Storage="_ListOfField", ThisKey="ParameterIndex", OtherKey="ParameterIndex", IsForeignKey=true)]
		public ListOfField ListOfField
		{
			get
			{
				return this._ListOfField.Entity;
			}
			set
			{
				ListOfField previousValue = this._ListOfField.Entity;
				if (((previousValue != value) 
							|| (this._ListOfField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ListOfField.Entity = null;
						previousValue.Parameter = null;
					}
					this._ListOfField.Entity = value;
					if ((value != null))
					{
						value.Parameter = this;
						this._ParameterIndex = value.ParameterIndex;
					}
					else
					{
						this._ParameterIndex = default(System.Guid);
					}
					this.SendPropertyChanged("ListOfField");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PropertyValue")]
	public partial class PropertyValue
	{
		
		private System.Guid _NodeIndex;
		
		private object _Value;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		public PropertyValue()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					this._NodeIndex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Variant", UpdateCheck=UpdateCheck.Never)]
		public object Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this._TimeStamp = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[References]")]
	public partial class Reference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ReferenceIndex;
		
		private System.Guid _Parent;
		
		private System.Guid _Target;
		
		private System.Nullable<System.Guid> _Type;
		
		private EntityRef<NodeDesign> _NodeDesign;
		
		private EntityRef<NodeDesign> _NodeDesign1;
		
		private EntityRef<NodeDesign> _NodeDesign2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferenceIndexChanging(System.Guid value);
    partial void OnReferenceIndexChanged();
    partial void OnParentChanging(System.Guid value);
    partial void OnParentChanged();
    partial void OnTargetChanging(System.Guid value);
    partial void OnTargetChanged();
    partial void OnTypeChanging(System.Nullable<System.Guid> value);
    partial void OnTypeChanged();
    #endregion
		
		public Reference()
		{
			this._NodeDesign = default(EntityRef<NodeDesign>);
			this._NodeDesign1 = default(EntityRef<NodeDesign>);
			this._NodeDesign2 = default(EntityRef<NodeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ReferenceIndex
		{
			get
			{
				return this._ReferenceIndex;
			}
			set
			{
				if ((this._ReferenceIndex != value))
				{
					this.OnReferenceIndexChanging(value);
					this.SendPropertyChanging();
					this._ReferenceIndex = value;
					this.SendPropertyChanged("ReferenceIndex");
					this.OnReferenceIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					if (this._NodeDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Target", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Target
		{
			get
			{
				return this._Target;
			}
			set
			{
				if ((this._Target != value))
				{
					if (this._NodeDesign1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetChanging(value);
					this.SendPropertyChanging();
					this._Target = value;
					this.SendPropertyChanged("Target");
					this.OnTargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._NodeDesign2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_Reference", Storage="_NodeDesign", ThisKey="Parent", OtherKey="NodeDesignIndex", IsForeignKey=true)]
		public NodeDesign NodeDesign
		{
			get
			{
				return this._NodeDesign.Entity;
			}
			set
			{
				NodeDesign previousValue = this._NodeDesign.Entity;
				if (((previousValue != value) 
							|| (this._NodeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeDesign.Entity = null;
						previousValue.References.Remove(this);
					}
					this._NodeDesign.Entity = value;
					if ((value != null))
					{
						value.References.Add(this);
						this._Parent = value.NodeDesignIndex;
					}
					else
					{
						this._Parent = default(System.Guid);
					}
					this.SendPropertyChanged("NodeDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_Reference1", Storage="_NodeDesign1", ThisKey="Target", OtherKey="NodeDesignIndex", IsForeignKey=true)]
		public NodeDesign NodeDesign1
		{
			get
			{
				return this._NodeDesign1.Entity;
			}
			set
			{
				NodeDesign previousValue = this._NodeDesign1.Entity;
				if (((previousValue != value) 
							|| (this._NodeDesign1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeDesign1.Entity = null;
						previousValue.References1.Remove(this);
					}
					this._NodeDesign1.Entity = value;
					if ((value != null))
					{
						value.References1.Add(this);
						this._Target = value.NodeDesignIndex;
					}
					else
					{
						this._Target = default(System.Guid);
					}
					this.SendPropertyChanged("NodeDesign1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_Reference2", Storage="_NodeDesign2", ThisKey="Type", OtherKey="NodeDesignIndex", IsForeignKey=true)]
		public NodeDesign NodeDesign2
		{
			get
			{
				return this._NodeDesign2.Entity;
			}
			set
			{
				NodeDesign previousValue = this._NodeDesign2.Entity;
				if (((previousValue != value) 
							|| (this._NodeDesign2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeDesign2.Entity = null;
						previousValue.References2.Remove(this);
					}
					this._NodeDesign2.Entity = value;
					if ((value != null))
					{
						value.References2.Add(this);
						this._Type = value.NodeDesignIndex;
					}
					else
					{
						this._Type = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("NodeDesign2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReferenceTypeDesign")]
	public partial class ReferenceTypeDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ReferenceTypeDesignIndex;
		
		private string _InverseName;
		
		private string _InverseNameKey;
		
		private System.Nullable<bool> _Symmetric;
		
		private EntityRef<TypeDesign> _TypeDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferenceTypeDesignIndexChanging(System.Guid value);
    partial void OnReferenceTypeDesignIndexChanged();
    partial void OnInverseNameChanging(string value);
    partial void OnInverseNameChanged();
    partial void OnInverseNameKeyChanging(string value);
    partial void OnInverseNameKeyChanged();
    partial void OnSymmetricChanging(System.Nullable<bool> value);
    partial void OnSymmetricChanged();
    #endregion
		
		public ReferenceTypeDesign()
		{
			this._TypeDesign = default(EntityRef<TypeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceTypeDesignIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ReferenceTypeDesignIndex
		{
			get
			{
				return this._ReferenceTypeDesignIndex;
			}
			set
			{
				if ((this._ReferenceTypeDesignIndex != value))
				{
					this.OnReferenceTypeDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._ReferenceTypeDesignIndex = value;
					this.SendPropertyChanged("ReferenceTypeDesignIndex");
					this.OnReferenceTypeDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InverseName", DbType="NChar(10)")]
		public string InverseName
		{
			get
			{
				return this._InverseName;
			}
			set
			{
				if ((this._InverseName != value))
				{
					this.OnInverseNameChanging(value);
					this.SendPropertyChanging();
					this._InverseName = value;
					this.SendPropertyChanged("InverseName");
					this.OnInverseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InverseNameKey", DbType="NChar(10)")]
		public string InverseNameKey
		{
			get
			{
				return this._InverseNameKey;
			}
			set
			{
				if ((this._InverseNameKey != value))
				{
					this.OnInverseNameKeyChanging(value);
					this.SendPropertyChanging();
					this._InverseNameKey = value;
					this.SendPropertyChanged("InverseNameKey");
					this.OnInverseNameKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symmetric", DbType="Bit")]
		public System.Nullable<bool> Symmetric
		{
			get
			{
				return this._Symmetric;
			}
			set
			{
				if ((this._Symmetric != value))
				{
					this.OnSymmetricChanging(value);
					this.SendPropertyChanging();
					this._Symmetric = value;
					this.SendPropertyChanged("Symmetric");
					this.OnSymmetricChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceTypeDesign_TypeDesign", Storage="_TypeDesign", ThisKey="ReferenceTypeDesignIndex", OtherKey="NodeIndex", IsUnique=true, IsForeignKey=false)]
		public TypeDesign TypeDesign
		{
			get
			{
				return this._TypeDesign.Entity;
			}
			set
			{
				TypeDesign previousValue = this._TypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._TypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeDesign.Entity = null;
						previousValue.ReferenceTypeDesign = null;
					}
					this._TypeDesign.Entity = value;
					if ((value != null))
					{
						value.ReferenceTypeDesign = this;
					}
					this.SendPropertyChanged("TypeDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TopLevelObjects")]
	public partial class TopLevelObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InformationsModelIndex;
		
		private System.Guid _NodeDesignIndex;
		
		private EntityRef<InformationsModel> _InformationsModel;
		
		private EntityRef<NodeDesign> _NodeDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInformationsModelIndexChanging(System.Guid value);
    partial void OnInformationsModelIndexChanged();
    partial void OnNodeDesignIndexChanging(System.Guid value);
    partial void OnNodeDesignIndexChanged();
    #endregion
		
		public TopLevelObject()
		{
			this._InformationsModel = default(EntityRef<InformationsModel>);
			this._NodeDesign = default(EntityRef<NodeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformationsModelIndex", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InformationsModelIndex
		{
			get
			{
				return this._InformationsModelIndex;
			}
			set
			{
				if ((this._InformationsModelIndex != value))
				{
					if (this._InformationsModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInformationsModelIndexChanging(value);
					this.SendPropertyChanging();
					this._InformationsModelIndex = value;
					this.SendPropertyChanged("InformationsModelIndex");
					this.OnInformationsModelIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeDesignIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeDesignIndex
		{
			get
			{
				return this._NodeDesignIndex;
			}
			set
			{
				if ((this._NodeDesignIndex != value))
				{
					if (this._NodeDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeDesignIndex = value;
					this.SendPropertyChanged("NodeDesignIndex");
					this.OnNodeDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InformationsModel_TopLevelObject", Storage="_InformationsModel", ThisKey="InformationsModelIndex", OtherKey="InformationsModelIndex", IsForeignKey=true)]
		public InformationsModel InformationsModel
		{
			get
			{
				return this._InformationsModel.Entity;
			}
			set
			{
				InformationsModel previousValue = this._InformationsModel.Entity;
				if (((previousValue != value) 
							|| (this._InformationsModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InformationsModel.Entity = null;
						previousValue.TopLevelObjects.Remove(this);
					}
					this._InformationsModel.Entity = value;
					if ((value != null))
					{
						value.TopLevelObjects.Add(this);
						this._InformationsModelIndex = value.InformationsModelIndex;
					}
					else
					{
						this._InformationsModelIndex = default(System.Guid);
					}
					this.SendPropertyChanged("InformationsModel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_TopLevelObject", Storage="_NodeDesign", ThisKey="NodeDesignIndex", OtherKey="NodeDesignIndex", IsForeignKey=true)]
		public NodeDesign NodeDesign
		{
			get
			{
				return this._NodeDesign.Entity;
			}
			set
			{
				NodeDesign previousValue = this._NodeDesign.Entity;
				if (((previousValue != value) 
							|| (this._NodeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeDesign.Entity = null;
						previousValue.TopLevelObject = null;
					}
					this._NodeDesign.Entity = value;
					if ((value != null))
					{
						value.TopLevelObject = this;
						this._NodeDesignIndex = value.NodeDesignIndex;
					}
					else
					{
						this._NodeDesignIndex = default(System.Guid);
					}
					this.SendPropertyChanged("NodeDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeDesign")]
	public partial class TypeDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeIndex;
		
		private object _ClassName;
		
		private System.Nullable<System.Guid> _BaseType;
		
		private EntityRef<DataTypeDesign> _DataTypeDesign;
		
		private EntityRef<NodeDesign> _NodeDesign;
		
		private EntityRef<ObjectTypeDesign> _ObjectTypeDesign;
		
		private EntityRef<NodeDesign> _NodeDesign1;
		
		private EntityRef<ReferenceTypeDesign> _ReferenceTypeDesign;
		
		private EntityRef<VariableTypeDesign> _VariableTypeDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeIndexChanging(System.Guid value);
    partial void OnNodeIndexChanged();
    partial void OnClassNameChanging(object value);
    partial void OnClassNameChanged();
    partial void OnBaseTypeChanging(System.Nullable<System.Guid> value);
    partial void OnBaseTypeChanged();
    #endregion
		
		public TypeDesign()
		{
			this._DataTypeDesign = default(EntityRef<DataTypeDesign>);
			this._NodeDesign = default(EntityRef<NodeDesign>);
			this._ObjectTypeDesign = default(EntityRef<ObjectTypeDesign>);
			this._NodeDesign1 = default(EntityRef<NodeDesign>);
			this._ReferenceTypeDesign = default(EntityRef<ReferenceTypeDesign>);
			this._VariableTypeDesign = default(EntityRef<VariableTypeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					if ((this._ReferenceTypeDesign.HasLoadedOrAssignedValue || this._VariableTypeDesign.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeIndex = value;
					this.SendPropertyChanged("NodeIndex");
					this.OnNodeIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="Variant", UpdateCheck=UpdateCheck.Never)]
		public object ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseType", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> BaseType
		{
			get
			{
				return this._BaseType;
			}
			set
			{
				if ((this._BaseType != value))
				{
					if (this._NodeDesign1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseTypeChanging(value);
					this.SendPropertyChanging();
					this._BaseType = value;
					this.SendPropertyChanged("BaseType");
					this.OnBaseTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDesign_DataTypeDesign", Storage="_DataTypeDesign", ThisKey="NodeIndex", OtherKey="DataTypeDesignIndex", IsUnique=true, IsForeignKey=false)]
		public DataTypeDesign DataTypeDesign
		{
			get
			{
				return this._DataTypeDesign.Entity;
			}
			set
			{
				DataTypeDesign previousValue = this._DataTypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._DataTypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataTypeDesign.Entity = null;
						previousValue.TypeDesign = null;
					}
					this._DataTypeDesign.Entity = value;
					if ((value != null))
					{
						value.TypeDesign = this;
					}
					this.SendPropertyChanged("DataTypeDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDesign_NodeDesign", Storage="_NodeDesign", ThisKey="NodeIndex", OtherKey="NodeDesignIndex", IsUnique=true, IsForeignKey=false)]
		public NodeDesign NodeDesign
		{
			get
			{
				return this._NodeDesign.Entity;
			}
			set
			{
				NodeDesign previousValue = this._NodeDesign.Entity;
				if (((previousValue != value) 
							|| (this._NodeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeDesign.Entity = null;
						previousValue.TypeDesign = null;
					}
					this._NodeDesign.Entity = value;
					if ((value != null))
					{
						value.TypeDesign = this;
					}
					this.SendPropertyChanged("NodeDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeDesign_ObjectTypeDesign", Storage="_ObjectTypeDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsUnique=true, IsForeignKey=false)]
		public ObjectTypeDesign ObjectTypeDesign
		{
			get
			{
				return this._ObjectTypeDesign.Entity;
			}
			set
			{
				ObjectTypeDesign previousValue = this._ObjectTypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._ObjectTypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectTypeDesign.Entity = null;
						previousValue.TypeDesign = null;
					}
					this._ObjectTypeDesign.Entity = value;
					if ((value != null))
					{
						value.TypeDesign = this;
					}
					this.SendPropertyChanged("ObjectTypeDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NodeDesign_TypeDesign", Storage="_NodeDesign1", ThisKey="BaseType", OtherKey="NodeDesignIndex", IsForeignKey=true)]
		public NodeDesign NodeDesign1
		{
			get
			{
				return this._NodeDesign1.Entity;
			}
			set
			{
				NodeDesign previousValue = this._NodeDesign1.Entity;
				if (((previousValue != value) 
							|| (this._NodeDesign1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NodeDesign1.Entity = null;
						previousValue.TypeDesigns.Remove(this);
					}
					this._NodeDesign1.Entity = value;
					if ((value != null))
					{
						value.TypeDesigns.Add(this);
						this._BaseType = value.NodeDesignIndex;
					}
					else
					{
						this._BaseType = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("NodeDesign1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceTypeDesign_TypeDesign", Storage="_ReferenceTypeDesign", ThisKey="NodeIndex", OtherKey="ReferenceTypeDesignIndex", IsForeignKey=true)]
		public ReferenceTypeDesign ReferenceTypeDesign
		{
			get
			{
				return this._ReferenceTypeDesign.Entity;
			}
			set
			{
				ReferenceTypeDesign previousValue = this._ReferenceTypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._ReferenceTypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReferenceTypeDesign.Entity = null;
						previousValue.TypeDesign = null;
					}
					this._ReferenceTypeDesign.Entity = value;
					if ((value != null))
					{
						value.TypeDesign = this;
						this._NodeIndex = value.ReferenceTypeDesignIndex;
					}
					else
					{
						this._NodeIndex = default(System.Guid);
					}
					this.SendPropertyChanged("ReferenceTypeDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableTypeDesign_TypeDesign", Storage="_VariableTypeDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsForeignKey=true)]
		public VariableTypeDesign VariableTypeDesign
		{
			get
			{
				return this._VariableTypeDesign.Entity;
			}
			set
			{
				VariableTypeDesign previousValue = this._VariableTypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._VariableTypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VariableTypeDesign.Entity = null;
						previousValue.TypeDesign = null;
					}
					this._VariableTypeDesign.Entity = value;
					if ((value != null))
					{
						value.TypeDesign = this;
						this._NodeIndex = value.NodeIndex;
					}
					else
					{
						this._NodeIndex = default(System.Guid);
					}
					this.SendPropertyChanged("VariableTypeDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VariableDesign")]
	public partial class VariableDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeIndex;
		
		private System.Nullable<System.Guid> _DefaultValueIndex;
		
		private System.Nullable<System.Guid> _DataTypeDesignIndex;
		
		private System.Nullable<int> _ValueRank;
		
		private string _ArrayDimensions;
		
		private System.Nullable<int> _AccessLevel;
		
		private System.Nullable<int> _MinimumSamplingInterval;
		
		private System.Nullable<bool> _Historizing;
		
		private bool _IsProperty;
		
		private EntityRef<InstanceDesign> _InstanceDesign;
		
		private EntityRef<DataTypeDesign> _DataTypeDesign;
		
		private EntityRef<DefaultValue> _DefaultValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeIndexChanging(System.Guid value);
    partial void OnNodeIndexChanged();
    partial void OnDefaultValueIndexChanging(System.Nullable<System.Guid> value);
    partial void OnDefaultValueIndexChanged();
    partial void OnDataTypeDesignIndexChanging(System.Nullable<System.Guid> value);
    partial void OnDataTypeDesignIndexChanged();
    partial void OnValueRankChanging(System.Nullable<int> value);
    partial void OnValueRankChanged();
    partial void OnArrayDimensionsChanging(string value);
    partial void OnArrayDimensionsChanged();
    partial void OnAccessLevelChanging(System.Nullable<int> value);
    partial void OnAccessLevelChanged();
    partial void OnMinimumSamplingIntervalChanging(System.Nullable<int> value);
    partial void OnMinimumSamplingIntervalChanged();
    partial void OnHistorizingChanging(System.Nullable<bool> value);
    partial void OnHistorizingChanged();
    partial void OnIsPropertyChanging(bool value);
    partial void OnIsPropertyChanged();
    #endregion
		
		public VariableDesign()
		{
			this._InstanceDesign = default(EntityRef<InstanceDesign>);
			this._DataTypeDesign = default(EntityRef<DataTypeDesign>);
			this._DefaultValue = default(EntityRef<DefaultValue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					this.OnNodeIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeIndex = value;
					this.SendPropertyChanged("NodeIndex");
					this.OnNodeIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValueIndex", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DefaultValueIndex
		{
			get
			{
				return this._DefaultValueIndex;
			}
			set
			{
				if ((this._DefaultValueIndex != value))
				{
					if (this._DefaultValue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultValueIndexChanging(value);
					this.SendPropertyChanging();
					this._DefaultValueIndex = value;
					this.SendPropertyChanged("DefaultValueIndex");
					this.OnDefaultValueIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTypeDesignIndex", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DataTypeDesignIndex
		{
			get
			{
				return this._DataTypeDesignIndex;
			}
			set
			{
				if ((this._DataTypeDesignIndex != value))
				{
					if (this._DataTypeDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataTypeDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._DataTypeDesignIndex = value;
					this.SendPropertyChanged("DataTypeDesignIndex");
					this.OnDataTypeDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueRank", DbType="Int")]
		public System.Nullable<int> ValueRank
		{
			get
			{
				return this._ValueRank;
			}
			set
			{
				if ((this._ValueRank != value))
				{
					this.OnValueRankChanging(value);
					this.SendPropertyChanging();
					this._ValueRank = value;
					this.SendPropertyChanged("ValueRank");
					this.OnValueRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrayDimensions", DbType="Char(10)")]
		public string ArrayDimensions
		{
			get
			{
				return this._ArrayDimensions;
			}
			set
			{
				if ((this._ArrayDimensions != value))
				{
					this.OnArrayDimensionsChanging(value);
					this.SendPropertyChanging();
					this._ArrayDimensions = value;
					this.SendPropertyChanged("ArrayDimensions");
					this.OnArrayDimensionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int")]
		public System.Nullable<int> AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumSamplingInterval", DbType="Int")]
		public System.Nullable<int> MinimumSamplingInterval
		{
			get
			{
				return this._MinimumSamplingInterval;
			}
			set
			{
				if ((this._MinimumSamplingInterval != value))
				{
					this.OnMinimumSamplingIntervalChanging(value);
					this.SendPropertyChanging();
					this._MinimumSamplingInterval = value;
					this.SendPropertyChanged("MinimumSamplingInterval");
					this.OnMinimumSamplingIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Historizing", DbType="Bit")]
		public System.Nullable<bool> Historizing
		{
			get
			{
				return this._Historizing;
			}
			set
			{
				if ((this._Historizing != value))
				{
					this.OnHistorizingChanging(value);
					this.SendPropertyChanging();
					this._Historizing = value;
					this.SendPropertyChanged("Historizing");
					this.OnHistorizingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProperty", DbType="Bit NOT NULL")]
		public bool IsProperty
		{
			get
			{
				return this._IsProperty;
			}
			set
			{
				if ((this._IsProperty != value))
				{
					this.OnIsPropertyChanging(value);
					this.SendPropertyChanging();
					this._IsProperty = value;
					this.SendPropertyChanged("IsProperty");
					this.OnIsPropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableDesign_InstanceDesign", Storage="_InstanceDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsUnique=true, IsForeignKey=false)]
		public InstanceDesign InstanceDesign
		{
			get
			{
				return this._InstanceDesign.Entity;
			}
			set
			{
				InstanceDesign previousValue = this._InstanceDesign.Entity;
				if (((previousValue != value) 
							|| (this._InstanceDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstanceDesign.Entity = null;
						previousValue.VariableDesign = null;
					}
					this._InstanceDesign.Entity = value;
					if ((value != null))
					{
						value.VariableDesign = this;
					}
					this.SendPropertyChanged("InstanceDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataTypeDesign_VariableDesign", Storage="_DataTypeDesign", ThisKey="DataTypeDesignIndex", OtherKey="DataTypeDesignIndex", IsForeignKey=true)]
		public DataTypeDesign DataTypeDesign
		{
			get
			{
				return this._DataTypeDesign.Entity;
			}
			set
			{
				DataTypeDesign previousValue = this._DataTypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._DataTypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataTypeDesign.Entity = null;
						previousValue.VariableDesigns.Remove(this);
					}
					this._DataTypeDesign.Entity = value;
					if ((value != null))
					{
						value.VariableDesigns.Add(this);
						this._DataTypeDesignIndex = value.DataTypeDesignIndex;
					}
					else
					{
						this._DataTypeDesignIndex = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DataTypeDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DefaultValue_VariableDesign", Storage="_DefaultValue", ThisKey="DefaultValueIndex", OtherKey="DefaultValueIndex", IsForeignKey=true)]
		public DefaultValue DefaultValue
		{
			get
			{
				return this._DefaultValue.Entity;
			}
			set
			{
				DefaultValue previousValue = this._DefaultValue.Entity;
				if (((previousValue != value) 
							|| (this._DefaultValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DefaultValue.Entity = null;
						previousValue.VariableDesigns.Remove(this);
					}
					this._DefaultValue.Entity = value;
					if ((value != null))
					{
						value.VariableDesigns.Add(this);
						this._DefaultValueIndex = value.DefaultValueIndex;
					}
					else
					{
						this._DefaultValueIndex = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DefaultValue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VariableTypeDesign")]
	public partial class VariableTypeDesign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NodeIndex;
		
		private System.Nullable<System.Guid> _DefaultValue;
		
		private System.Nullable<System.Guid> _DataTypeDesignIndex;
		
		private System.Nullable<int> _ValueRank;
		
		private string _ArrayDimensions;
		
		private System.Nullable<int> _AccessLevel;
		
		private System.Nullable<int> _MinimumSamplingInterval;
		
		private System.Nullable<bool> _Historizing;
		
		private System.Nullable<bool> _ExposesItsChildren;
		
		private EntityRef<TypeDesign> _TypeDesign;
		
		private EntityRef<DataTypeDesign> _DataTypeDesign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNodeIndexChanging(System.Guid value);
    partial void OnNodeIndexChanged();
    partial void OnDefaultValueChanging(System.Nullable<System.Guid> value);
    partial void OnDefaultValueChanged();
    partial void OnDataTypeDesignIndexChanging(System.Nullable<System.Guid> value);
    partial void OnDataTypeDesignIndexChanged();
    partial void OnValueRankChanging(System.Nullable<int> value);
    partial void OnValueRankChanged();
    partial void OnArrayDimensionsChanging(string value);
    partial void OnArrayDimensionsChanged();
    partial void OnAccessLevelChanging(System.Nullable<int> value);
    partial void OnAccessLevelChanged();
    partial void OnMinimumSamplingIntervalChanging(System.Nullable<int> value);
    partial void OnMinimumSamplingIntervalChanged();
    partial void OnHistorizingChanging(System.Nullable<bool> value);
    partial void OnHistorizingChanged();
    partial void OnExposesItsChildrenChanging(System.Nullable<bool> value);
    partial void OnExposesItsChildrenChanged();
    #endregion
		
		public VariableTypeDesign()
		{
			this._TypeDesign = default(EntityRef<TypeDesign>);
			this._DataTypeDesign = default(EntityRef<DataTypeDesign>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					this.OnNodeIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeIndex = value;
					this.SendPropertyChanged("NodeIndex");
					this.OnNodeIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTypeDesignIndex", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DataTypeDesignIndex
		{
			get
			{
				return this._DataTypeDesignIndex;
			}
			set
			{
				if ((this._DataTypeDesignIndex != value))
				{
					if (this._DataTypeDesign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataTypeDesignIndexChanging(value);
					this.SendPropertyChanging();
					this._DataTypeDesignIndex = value;
					this.SendPropertyChanged("DataTypeDesignIndex");
					this.OnDataTypeDesignIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueRank", DbType="Int")]
		public System.Nullable<int> ValueRank
		{
			get
			{
				return this._ValueRank;
			}
			set
			{
				if ((this._ValueRank != value))
				{
					this.OnValueRankChanging(value);
					this.SendPropertyChanging();
					this._ValueRank = value;
					this.SendPropertyChanged("ValueRank");
					this.OnValueRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrayDimensions", DbType="NChar(10)")]
		public string ArrayDimensions
		{
			get
			{
				return this._ArrayDimensions;
			}
			set
			{
				if ((this._ArrayDimensions != value))
				{
					this.OnArrayDimensionsChanging(value);
					this.SendPropertyChanging();
					this._ArrayDimensions = value;
					this.SendPropertyChanged("ArrayDimensions");
					this.OnArrayDimensionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int")]
		public System.Nullable<int> AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumSamplingInterval", DbType="Int")]
		public System.Nullable<int> MinimumSamplingInterval
		{
			get
			{
				return this._MinimumSamplingInterval;
			}
			set
			{
				if ((this._MinimumSamplingInterval != value))
				{
					this.OnMinimumSamplingIntervalChanging(value);
					this.SendPropertyChanging();
					this._MinimumSamplingInterval = value;
					this.SendPropertyChanged("MinimumSamplingInterval");
					this.OnMinimumSamplingIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Historizing", DbType="Bit")]
		public System.Nullable<bool> Historizing
		{
			get
			{
				return this._Historizing;
			}
			set
			{
				if ((this._Historizing != value))
				{
					this.OnHistorizingChanging(value);
					this.SendPropertyChanging();
					this._Historizing = value;
					this.SendPropertyChanged("Historizing");
					this.OnHistorizingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExposesItsChildren", DbType="Bit")]
		public System.Nullable<bool> ExposesItsChildren
		{
			get
			{
				return this._ExposesItsChildren;
			}
			set
			{
				if ((this._ExposesItsChildren != value))
				{
					this.OnExposesItsChildrenChanging(value);
					this.SendPropertyChanging();
					this._ExposesItsChildren = value;
					this.SendPropertyChanged("ExposesItsChildren");
					this.OnExposesItsChildrenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VariableTypeDesign_TypeDesign", Storage="_TypeDesign", ThisKey="NodeIndex", OtherKey="NodeIndex", IsUnique=true, IsForeignKey=false)]
		public TypeDesign TypeDesign
		{
			get
			{
				return this._TypeDesign.Entity;
			}
			set
			{
				TypeDesign previousValue = this._TypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._TypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeDesign.Entity = null;
						previousValue.VariableTypeDesign = null;
					}
					this._TypeDesign.Entity = value;
					if ((value != null))
					{
						value.VariableTypeDesign = this;
					}
					this.SendPropertyChanged("TypeDesign");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataTypeDesign_VariableTypeDesign", Storage="_DataTypeDesign", ThisKey="DataTypeDesignIndex", OtherKey="DataTypeDesignIndex", IsForeignKey=true)]
		public DataTypeDesign DataTypeDesign
		{
			get
			{
				return this._DataTypeDesign.Entity;
			}
			set
			{
				DataTypeDesign previousValue = this._DataTypeDesign.Entity;
				if (((previousValue != value) 
							|| (this._DataTypeDesign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataTypeDesign.Entity = null;
						previousValue.VariableTypeDesigns.Remove(this);
					}
					this._DataTypeDesign.Entity = value;
					if ((value != null))
					{
						value.VariableTypeDesigns.Add(this);
						this._DataTypeDesignIndex = value.DataTypeDesignIndex;
					}
					else
					{
						this._DataTypeDesignIndex = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DataTypeDesign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
